@page "/favoritos"
@using ModeloCartas;
@using Services;
@using ModelosBD;
@using ClaseIdiomas;
@inject LocalizationResourceManager loc;
@inject UsuarioService UsuarioService


<h3>@loc["fav"]</h3>

<div class="d-flex justify-content-between align-items-center flex-wrap mb-3" style="gap: 10px;float:right;">
	<div class="d-flex align-items-center" style="gap: 10px;">
		<div class="btn-group" role="group">
			<button type="button"
			class="btn @(vistaMosaico ? "btn-primary" : "btn-outline-secondary")"
			@onclick="@(() => CambiarVista(true))">
				<i class="bi bi-grid-3x3-gap"></i>
			</button>
			<button type="button"
			class="btn @(!vistaMosaico ? "btn-primary" : "btn-outline-secondary")"
			@onclick="@(() => CambiarVista(false))">
				<i class="bi bi-list-ul"></i>
			</button>
		</div>
		<form class="d-flex" role="search" @onsubmit="CargarCartasFiltradas">
			<input class="form-control me-2" type="search" placeholder="@loc["buscar"]..." aria-label="Search" @bind="nombreBuscar">
			<button class="btn btn-outline-success" type="submit">
				<i class="bi bi-search"></i>
			</button>
		</form>
	</div>
</div>
<br /><br />
<input @ref="top" style="position:absolute; top:0; left:0; opacity:0;" />
@if (estaCargando)
{
	<div class="loading-container">
		<div class="spinner-border custom-spinner" role="status">
			<span class="visually-hidden">Cargando...</span>
		</div>
		<h4 class="loading-text">@loc["load"]</h4>
	</div>
}
else if (cartas == null)
{
	<div>
		<h4>@loc["nocard"]</h4>
	</div>
}
else if (!cartasFiltradas.Any())
{
	<div>
		<h4>@loc["nocoin"]</h4>
	</div>
}
else
{
	<!-- Paginación top -->
	<div class="pagination-container d-flex justify-content-center align-items-center my-4 gap-3">
		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaAnterior"
		disabled="@(!PuedeIrPaginaAnterior)">
			<i class="bi bi-arrow-left-circle me-2"></i>@loc["ant"]
		</button>

		<span class="fs-5 fw-semibold">@loc["pag"] @paginaActual @loc["de"] @totalPaginas</span>

		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaSiguiente"
		disabled="@(!PuedeIrPaginaSiguiente)">
			@loc["sig"]<i class="bi bi-arrow-right-circle ms-2"></i>
		</button>
	</div>



	<!-- MOSTRAR CARTAS -->
	@if (vistaMosaico)
	{
		<!-- Vista mosaico -->
		<div class="card-mosaic">
			@foreach (var carta in cartasFiltradas)
			{
				<div class="card-item position-relative">
					<button class="favorite-btn" @onclick="() => eliminarFav(carta)">
						<i class="bi bi-trash-fill"></i>
					</button>
					<img src="@carta.images.large" alt="@carta.name" class="card-image" />
					<div class="card-name">@carta.name</div>
				</div>

			}
		</div>
	}
	else
	{
		<!-- Vista lista -->
		<table class="table table-striped table-hover mt-3">
			<thead class="table-dark">
				<tr>
					<th>@loc["img"]</th>
					<th>@loc["nom"]</th>
					<th>@loc["tipo"]</th>
					<th>@loc["rar"]</th>
					<th>@loc["deb"]</th>
					<th>@loc["eliminar"]</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var carta in cartasFiltradas)
				{
					<tr>
						<td><img src="@carta.images.small" alt="@carta.name" width="60" /></td>
						<td>@carta.name</td>
						<td>@(carta.types?.FirstOrDefault() ?? "-")</td>
						<td>@(carta.rarity ?? "-")</td>
						<td>@(carta.weaknesses?.FirstOrDefault()?.type ?? "-")</td>
						<td>
							<button class="favorite-btn" @onclick="() => eliminarFav(carta)">
								<i class="bi bi-trash-fill"></i>
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}


	<!-- Paginación bottom -->
	<div class="pagination-container d-flex justify-content-center align-items-center my-4 gap-3">
		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaAnterior"
		disabled="@(!PuedeIrPaginaAnterior)">
			<i class="bi bi-arrow-left-circle me-2"></i>@loc["ant"]
		</button>

		<span class="fs-5 fw-semibold">@loc["pag"] @paginaActual @loc["de"] @totalPaginas</span>

		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaSiguiente"
		disabled="@(!PuedeIrPaginaSiguiente)">
			@loc["sig"]<i class="bi bi-arrow-right-circle ms-2"></i>
		</button>
	</div>
}


@code {
	HttpClient http = new HttpClient();
	FavoritoService favoritos = new FavoritoService(new HttpClient());
	CartaService carser = new CartaService(new HttpClient()); 

	private string nombreBuscar = "";

	int paginaActual = 1;
	int totalPaginas = 1;
	int pageSize = 1;	
	private ElementReference top;
	private bool PuedeIrPaginaSiguiente => paginaActual < totalPaginas;
	private bool PuedeIrPaginaAnterior => paginaActual > 1;

	Cartas? cartas;
	List<Datum> cartasFiltradas = new();
	bool estaCargando = false;
	bool vistaMosaico = true;

	int idioma = 0;

	protected override async Task OnInitializedAsync()
	{
		var user = await UsuarioService.GetById(int.Parse(AppContext.GetData("logged")!.ToString()!));
		idioma = user.idIdioma;
		loc.SetIdioma(idioma switch
		{
			1 => "es",
			2 => "eu",
			3 => "en",
			_ => "es"
		});
		await CargarCartasAsync();
		loc.OnLanguageChanged += OnLanguageChanged;
	}

	private void OnLanguageChanged()
	{
		InvokeAsync(StateHasChanged);
	}

	// Cargar cartas con paginación
	private async Task CargarCartasAsync()
	{
		estaCargando = true;
		StateHasChanged(); // fuerza actualización visual inmediata
		try
		{
			var favs = await favoritos.GetAll();
			var lista = favs.Where(f => f.IdUser.Equals(int.Parse(AppContext.GetData("logged")!.ToString()!))).ToList();
			List<string> listaIDs = lista.Select(f => f.Id).ToList();

			var resultado = await http.GetFromJsonAsync<Cartas>(Metodos.GetCartasID(listaIDs));

			if (nombreBuscar == "")
			{
				var convertir = new List<Datum>();
				foreach (FavoritoDB fav in lista)
				{
					var temp = resultado.data.Where(c => c.id.Equals(fav.Id)).FirstOrDefault();
					convertir.Add(temp);
				}

				cartas = resultado;
				cartas.data = convertir.ToArray();
				pageSize = cartas.pageSize;
				totalPaginas = (int)Math.Ceiling((double)lista.Count() / pageSize);
				cartasFiltradas = cartas.data.ToList();
			}
			else
			{
				if (resultado != null)
				{
					cartas = resultado;
					pageSize = cartas.pageSize;
					totalPaginas = (int)Math.Ceiling((double)cartas.totalCount / pageSize);
					cartasFiltradas = cartas.data.ToList();
				}
			}


		}
		finally
		{
			estaCargando = false;
			StateHasChanged();
			loc.SetIdioma(idioma switch
			{
				1 => "es",
				2 => "eu",
				3 => "en",
				_ => "es"
			});
		}
	}

	private async Task CargarCartasFiltradas()
	{
		estaCargando = true;
		StateHasChanged(); // fuerza actualización visual inmediata

		try
		{
			cartasFiltradas = cartas.data.Where(c => c.name.Contains(nombreBuscar, StringComparison.OrdinalIgnoreCase)).ToList();
		}
		finally
		{
			estaCargando = false;
			StateHasChanged();
			loc.SetIdioma(idioma switch
			{
				1 => "es",
				2 => "eu",
				3 => "en",
				_ => "es"
			});
		}
	}
	void CambiarVista(bool mosaico)
	{
		vistaMosaico = mosaico;
	}
	private async Task IrPaginaSiguiente()
	{
		if (paginaActual < totalPaginas)
		{
			paginaActual++;
			await CargarCartasAsync();
			await top.FocusAsync();
		}
	}

	private async Task IrPaginaAnterior()
	{
		if (paginaActual > 1)
		{
			paginaActual--;
			await CargarCartasAsync();
			await top.FocusAsync();
		}
	}

	private async void eliminarFav(Datum carta)
	{
		var res= await favoritos.Delete(carta.id);
		await App.Current!.MainPage!.DisplayAlert(loc["fav"], loc["delcard"], "OK");
		await CargarCartasAsync();
	}
}
