@page "/"
@using ModeloCard;
@using ModeloCartas;
@using System.Net;
@using ModelosBD;
@using Services;
@using System.Net;


<!-- Mensaje error añadir favorito: usuario no logueado -->
@if (!string.IsNullOrEmpty(alertaMensaje))
{
	<div class="alert @alertaClase alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3 shadow"
		 style="z-index:9999; min-width: 300px;" role="alert">
		@alertaMensaje
	</div>
}

<!-- CONTENEDOR PRINCIPAL: FILTROS IZQUIERDA | VISTA Y BUSQUEDA DERECHA -->
<div class="d-flex justify-content-between align-items-center flex-wrap mb-3" style="gap: 10px;">

	<!-- FILTROS IZQUIERDA -->
	<div class="d-flex align-items-center flex-wrap" style="gap: 20px;">
		<!-- FILTRO TIPO -->
		<select class="form-select" style="width: 150px;" @bind="SelectedTipo">
			<option value="-1">Tipo</option>
			@if (tipos != null)
			{
				@foreach (string tipo in tipos)
				{
					<option value="@tipo">@tipo</option>
				}
			}
		</select>

		<!-- FILTRO DEBILIDAD -->
		<select class="form-select" style="width: 150px;" @bind="SelectedDebilidad">
			<option value="-1">Debilidad</option>
			@if (debilidades != null)
			{
				@foreach (string deb in debilidades)
				{
					<option value="@deb">@deb</option>
				}
			}
		</select>

		<!-- FILTRO RAREZA -->
		<select class="form-select" style="width: 150px;" @bind="SelectedRareza">
			<option value="-1">Rareza</option>
			@if (rarezas != null)
			{
				@foreach (string rare in rarezas)
				{
					<option value="@rare">@rare</option>
				}
			}
		</select>

		<!-- FILTRO PRECIO -->
		<div class="d-flex align-items-center" style="gap: 5px;">
			<span class="fw-semibold text-secondary">Precio:</span>
			<input class="form-control" style="width:90px;" placeholder="min." @bind="precioMinimo" type="number" step="0.01" />
			<span>-</span>
			<input class="form-control" style="width:90px;" placeholder="max." @bind="precioMaximo" type="number" step="0.01" />
			<button class="btn btn-outline-success" type="submit" @onclick="CargarCartasFiltradas">
				<i class="bi bi-search"></i>
			</button>
		</div>
	</div>

	<!-- BUSQUEDA Y VISTA DERECHA -->
	<div class="d-flex align-items-center" style="gap: 10px;">
		<!-- VISTA MOSAICO / LISTA -->
		<div class="btn-group" role="group">
			<button type="button"
			class="btn @(vistaMosaico ? "btn-primary" : "btn-outline-secondary")"
			@onclick="@(() => CambiarVista(true))">
				<i class="bi bi-grid-3x3-gap"></i>
			</button>
			<button type="button"
			class="btn @(!vistaMosaico ? "btn-primary" : "btn-outline-secondary")"
			@onclick="@(() => CambiarVista(false))">
				<i class="bi bi-list-ul"></i>
			</button>
		</div>

		<!-- FILTRO DE BUSQUEDA POR NOMBRE -->
		<form class="d-flex" role="search" @onsubmit="CargarCartasFiltradas">
			<input class="form-control me-2" type="search" placeholder="Buscar..." aria-label="Search" @bind="nombreBuscar">
			<button class="btn btn-outline-success" type="submit">
				<i class="bi bi-search"></i>
			</button>
		</form>

	</div>
</div>


<br />
<br />

<!-- Punto anclaje scroll -->
<input @ref="top" style="position:absolute; top:0; left:0; opacity:0;" />

<!-- Visualizacion de cartas -->
@if (estaCargando)
{
	<div class="loading-container">
		<div class="spinner-border custom-spinner" role="status">
			<span class="visually-hidden">Cargando...</span>
		</div>
		<h4 class="loading-text">Cargando cartas...</h4>
	</div>
}
else if (cartas == null)
{
	<div>
		<h4>No hay cartas.</h4>
	</div>
}
else if (!cartasFiltradas.Any())
{
	<div>
		<h4>No hay cartas que coincidan.</h4>
	</div>
}
else
{
	<!-- Paginación top -->
	<div class="pagination-container d-flex justify-content-center align-items-center my-4 gap-3">
		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaAnterior"
		disabled="@(!PuedeIrPaginaAnterior)">
			<i class="bi bi-arrow-left-circle me-2"></i>Anterior
		</button>

		<span class="fs-5 fw-semibold">Página @paginaActual de @totalPaginas</span>

		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaSiguiente"
		disabled="@(!PuedeIrPaginaSiguiente)">
			Siguiente<i class="bi bi-arrow-right-circle ms-2"></i>
		</button>
	</div>



	<!-- MOSTRAR CARTAS -->
	@if (vistaMosaico)
	{
		<!-- Vista mosaico -->
		<div class="card-mosaic">
			@foreach (var carta in cartasFiltradas)
			{
				<div class="card-item position-relative">
					<!-- Boton añadir a favorito -->
					<button class="favorite-btn" @onclick="() => addFavorito(carta.id, idUsuarioLogueado)">
						<i class="bi bi-heart"></i>
					</button>
					<img src="@carta.images.large" alt="@carta.name" class="card-image" />
					<div class="card-name">@carta.name</div>
				</div>

			}
		</div>
	}
	else
	{
		<!-- Vista lista -->
		<table class="table table-striped table-hover mt-3">
			<thead class="table-dark">
				<tr>
					<th>Imagen</th>
					<th>Nombre</th>
					<th>Tipo</th>
					<th>Rareza</th>
					<th>Debilidad</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var carta in cartasFiltradas)
				{
					<tr>
						<td><img src="@carta.images.small" alt="@carta.name" width="60" /></td>
						<td>@carta.name</td>
						<td>@(carta.types?.FirstOrDefault() ?? "-")</td>
						<td>@(carta.rarity ?? "-")</td>
						<td>@(carta.weaknesses?.FirstOrDefault()?.type ?? "-")</td>
					</tr>
				}
			</tbody>
		</table>
	}


	<!-- Paginación bottom -->
	<div class="pagination-container d-flex justify-content-center align-items-center my-4 gap-3">
		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaAnterior"
		disabled="@(!PuedeIrPaginaAnterior)">
			<i class="bi bi-arrow-left-circle me-2"></i>Anterior
		</button>

		<span class="fs-5 fw-semibold">Página @paginaActual de @totalPaginas</span>

		<button class="btn btn-success px-4 py-2 rounded-pill shadow-sm"
		@onclick="IrPaginaSiguiente"
		disabled="@(!PuedeIrPaginaSiguiente)">
			Siguiente<i class="bi bi-arrow-right-circle ms-2"></i>
		</button>
	</div>
}

<!-- Footer -->
<footer class="py-4 bg-dark text-white">
	<div class="container text-center">
		<p class="mb-0">© 2025 PokeDeck. Todos los derechos reservados.</p>
		<p class="mb-0">
			Síguenos en:
			<a href="#" class="text-white mx-2"><i class="fab fa-facebook-f"></i></a>
			<a href="#" class="text-white mx-2"><i class="fab fa-twitter"></i></a>
			<a href="#" class="text-white mx-2"><i class="fab fa-instagram"></i></a>
			<a href="#" class="text-white mx-2"><i class="fab fa-linkedin-in"></i></a>
		</p>
	</div>
</footer>

@code {
	HttpClient http = new HttpClient();
	FavoritoService FavoritoService = new FavoritoService(new HttpClient());

	int idUsuarioLogueado;

	Cartas? cartas;
	List<Datum> cartasFiltradas = new();
	List<string>? tipos;
	List<string>? rarezas;
	List<string>? debilidades;
	List<string>? deb2 = new List<string>();

	//filtro nombre
	private string nombreBuscar = "";

	//filtro precio
	private float precioMinimo = 0;
	private float precioMaximo = 0;

	//popup alerta mensaje
	private string alertaMensaje = "";
	private string alertaClase = "alert-info";

	//paginacion
	int paginaActual = 1;
	int totalPaginas = 1;
	int pageSize = 1;

	bool estaCargando = false;
	bool vistaMosaico = true;

	private ElementReference top;

	private string SelectedTipo
	{
		get => selectedTipo;
		set
		{
			selectedTipo = value;
			CargarCartasFiltradas();
		}
	}

	private string SelectedDebilidad
	{
		get => selectedDebilidad;
		set
		{
			selectedDebilidad = value;
			CargarCartasFiltradas();
		}
	}

	private string SelectedRareza
	{
		get => selectedRareza;
		set
		{
			selectedRareza = value;
			CargarCartasFiltradas();
		}
	}

	private string selectedTipo = "-1";
	private string selectedDebilidad = "-1";
	private string selectedRareza = "-1";

	//OnInit
	protected override async Task OnInitializedAsync()
	{
		//obtener el id del usuario logueado
		idUsuarioLogueado = (int?)AppContext.GetData("logged") ?? -1;
		await CargarCartasAsync();
	}

	// Cargar cartas con paginación
	private async Task CargarCartasAsync()
	{
		estaCargando = true;
		StateHasChanged(); // fuerza actualización visual inmediata

		try
		{
			var resultado = await http.GetFromJsonAsync<Cartas>(Metodos.GetCartas(nombreBuscar, selectedTipo, selectedDebilidad, selectedRareza, precioMinimo, precioMaximo, paginaActual));

			if (resultado != null)
			{
				cartas = resultado;
				pageSize = cartas.pageSize;
				totalPaginas = (int)Math.Ceiling((double)cartas.totalCount / pageSize);
				cartasFiltradas = cartas.data.ToList();

				deb2.Clear();
				foreach (var carta in cartas.data)
				{
					if (carta.weaknesses != null && carta.weaknesses.Any())
					{
						deb2.Add(carta.weaknesses[0].type);
					}
				}

				//carga los tipos para los filtros dropdown
				if (paginaActual == 1)
				{
					//debilidad
					debilidades = deb2.Distinct().OrderBy(x => x).ToList();
					//tipos
					tipos = cartas.data
						.Where(c => c.types != null && c.types.Any())
						.Select(c => c.types[0])
						.Distinct().OrderBy(x => x).ToList();
					//rarezas
					rarezas = cartas.data
						.Where(c => !string.IsNullOrEmpty(c.rarity))
						.Select(c => c.rarity)
						.Distinct().OrderBy(x => x).ToList();
				}
			}
		}
		finally
		{
			estaCargando = false;
			StateHasChanged();
		}
	}

	// Método para ejecutar la búsqueda por nombre
	private async Task CargarCartasFiltradas()
	{
		estaCargando = true;
		StateHasChanged(); // fuerza actualización visual inmediata

		try
		{
			var resultado = await http.GetFromJsonAsync<Cartas>(Metodos.GetCartas(nombreBuscar, selectedTipo, selectedDebilidad, selectedRareza, precioMinimo, precioMaximo, paginaActual));

			if (resultado != null)
			{
				cartas = resultado;
				pageSize = cartas.pageSize;
				totalPaginas = (int)Math.Ceiling((double)cartas.totalCount / pageSize);
				cartasFiltradas = cartas.data.ToList();
			}
		}
		finally
		{
			estaCargando = false;
			StateHasChanged();
		}
	}

	// Métodos de navegación de página
	private async Task IrPaginaSiguiente()
	{
		if (paginaActual < totalPaginas)
		{
			paginaActual++;
			await CargarCartasAsync();
			await top.FocusAsync();
		}
	}

	private async Task IrPaginaAnterior()
	{
		if (paginaActual > 1)
		{
			paginaActual--;
			await CargarCartasAsync();
			await top.FocusAsync();
		}
	}

	// Propiedades para deshabilitar botones de paginación
	private bool PuedeIrPaginaSiguiente => paginaActual < totalPaginas;
	private bool PuedeIrPaginaAnterior => paginaActual > 1;

	//cambiar el modo de vista
	void CambiarVista(bool mosaico)
	{
		vistaMosaico = mosaico;
	}

	//metodo para añadir una carta a la pagina de favoritos
	private async Task addFavorito(string id, int idUser)
	{
		if (idUser == -1)
		{
			await MostrarAlerta("Debes iniciar sesión para añadir favoritos.", "warning");
			return;
		}

		FavoritoDB favorito = new FavoritoDB
			{
				Id = id,
				IdUser = idUser
			};

		var response = await FavoritoService.Add(favorito);

		if (response.IsSuccessStatusCode)
		{
			await MostrarAlerta("Favorito añadido correctamente.", "success");
		}
		else if (response.StatusCode == HttpStatusCode.Conflict)
		{
			await MostrarAlerta("Esta carta ya está en tus favoritos.", "info");
		}
		else
		{
			await MostrarAlerta("Ocurrió un error al añadir favorito.", "error");
		}
	}

	//metodo alerta mensaje
	private async Task MostrarAlerta(string mensaje, string tipo = "info")
	{
		alertaMensaje = mensaje;
		alertaClase = tipo switch
		{
			"success" => "alert-success",
			"error" => "alert-danger",
			"warning" => "alert-warning",
			_ => "alert-info"
		};

		StateHasChanged();
		await Task.Delay(3000);
		alertaMensaje = "";
		StateHasChanged();
	}

}
